%% run_lif_sim_batches_addSTDC.m
% Batch simulation of leaky integrate-and-fire neurons with additive STDP
% close all;
% clearvars;
% clc;

if ~isdir('lif_sim_data_addSTDC')
	mkdir('lif_sim_data_addSTDC')
end

load('rng_states_spike_list');
r_b_list = 0:10:20;
sim_list = 1:100;

for r_b = r_b_list
  for sim_num = sim_list
    sim_start_date = datestr(now);
    disp(['Simulation ' num2str(find(sim_list == sim_num)) ...
      '/' num2str(length(sim_list)) ...
      '; Background Rate: ' num2str(r_b) 'Hz' ...
      '; Time: ' sim_start_date]);

    % generate spike list
    disp('Generating spike list.'); 
    rng(rng_states{sim_num});
    run(fullfile('gen_spike_list_lif_p_all'));
    t_f_pre_list = spike_list;
    clearvars('-except', ...
      'rng_states', ... 
      'r_b', ...
      'r_b_list', ...   
      'sim_list', ...
      'sim_num', ... 
      'sim_start_date', ...  
      'sim_time',...
      't_f_pre_list'); 

  %   rng(rng_states_sim{sim_num});  
    disp('Simulating additive STDP with construction.');
    lif_sim_addSTDC;

    disp('Clearing spike list to save memory.');
    clearvars('t_f_pre_list');

    file_name = ...
      fullfile('lif_sim_data_addSTDC', ...
        ['lif_sim_addSTDC_rb', num2str(r_b, '%02d'), ...
        '_f', num2str(sim_num, '%03d'), ...
        datestr(sim_start_date, '_yyyy-mm-dd_HHMMSS')]);

    disp(['Saving simulation data as: ' file_name]);
    save(file_name);
    disp('Simulation results saved.');

    clearvars('-except', ...
      'rng_states', ... 
      'r_b', ...
      'r_b_list', ...   
      'sim_list', ...
      'sim_num', ... 
      'sim_start_date', ... 
      'spike_list', ... 
      'sim_time');     
    disp('Workspace cleared.');
  end
end